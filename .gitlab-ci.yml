stages:
  - dependency cache
  - code quality
  - test
  - build
  - deploy
  - docs

build-venv:
  image: python:$PYVER
  stage: dependency cache
  script:
    - python -m venv --copies .venv
    - source .venv/bin/activate
    - pip install "poetry==1.0.10"
    - poetry install --no-root
    - poetry run python build.py
  parallel:
    matrix:
      - matrixvar2: matrixvar2 # Matrix requires two variables
        PYVER: ["3.6", "3.7", "3.8"]
  cache:
    key: 
      files: 
        - poetry.lock
        - src/libjpeg/jversion.h
      prefix: ${PYVER}
    paths: 
      - .venv/
      - src/libjpeg
  rules:
    - when: always

 # Code quality
.cq-base:
  image: python:3.8
  stage: code quality
  before_script:
    - source .venv/bin/activate  
  needs: 
    - build-venv
  cache:
    key: 
      files: 
        - poetry.lock
        - src/libjpeg/jversion.h
      prefix: "3.8"
    paths: 
      - .venv/
      - src/libjpeg
    policy: pull
  rules:
    - when: always

lint:
  extends: .cq-base
  script:
    - poetry install
    - poetry run pylint torchjpeg
    - poetry run pylint test
    - poetry run pylint examples
    - poetry run pylint ./*.py

type-check:
  extends: .cq-base
  script:
    - poetry run mypy src/torchjpeg
    - poetry run mypy test
    - poetry run mypy examples
    - poetry run mypy ./*.py

imports-sorted:
  extends: .cq-base
  script:
    - poetry run isort . --check --recursive

style:
  extends: .cq-base
  script:
    - poetry run black . --check

dco:
  extends: .cq-base
  script:
    - poetry run invoke dco

# Tests
test:
  image: python:$PYVER
  stage: test
  parallel:
    matrix:
      - matrixvar2: matrixvar2 # Matrix requires two variables
        PYVER: ["3.6", "3.7", "3.8"]
  before_script:
    - source .venv/bin/activate
    - poetry install
  script:
    - poetry run pytest test/import --junitxml=import.xml --cov-report xml
    - poetry run pytest test/unit --junitxml=unit.xml --cov-report xml
    #- poetry run pytest test/e2e
  artifacts:
    reports:
      cobertura: coverage.xml
      junit:
        - import.xml
        - unit.xml
  needs: 
    - build-venv
  cache:
    key: 
      files: 
        - poetry.lock
        - src/libjpeg/jversion.h
      prefix: ${PYVER}
    paths: 
      - .venv/
      - src/libjpeg
    policy: pull
  coverage: '/^TOTAL.+?(\d+\%)$/'
  rules:
    - when: always

# Build wheels
build-wheel:
  image: quay.io/pypa/manylinux2014_x86_64
  stage: build
  variables: 
    PYBIN: /opt/python/$PYVER/bin
  parallel:
    matrix:
      - matrixvar2: matrixvar2 # Matrix requires two variables
        PYVER: [cp36-cp36m, cp37-cp37m, cp38-cp38]
  script:
    - yum install util-linux
    - ${PYBIN}/pip install poetry==1.0.10
    - ${PYBIN}/poetry run pip install "dunamai==1.3.0" "torch==1.5.1"
    - ${PYBIN}/poetry version $(${PYBIN}/poetry run python version.py)
    - ${PYBIN}/poetry build
    - rename linux manylinux2014 dist/*
  needs: []
  dependencies: []
  artifacts:
    paths:
      - dist/
      - pyproject.toml
  rules:
    - when: always
  
# Deploy wheels
pypi:
  stage: deploy
  image: python:3.8
  script:
    - pip install "poetry==1.0.10"
    - poetry publish --username __token__ --password ${pypi_push_key}
  rules:
    - if: '$CI_COMMIT_TAG'
      when: on_success
    - if: '$BUILD_OFFICIAL'
      when: on_success
  dependencies:
    - build-wheel

pages:
  stage: docs
  image: python:3.8
  script:
    - wheel_38=`ls dist/*38*`
    - pip install ${wheel_38}
    - cd doc
    - pip install -r requirements.txt
    - make html
    - mv build/html ../public
  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_COMMIT_TAG'
      when: on_success
  dependencies:
    - build-wheel