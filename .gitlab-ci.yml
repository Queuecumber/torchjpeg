stages:
  - dependency cache
  - code quality
  - test
  - build
  - deploy

build-venv:
  image: python:$PYVER
  stage: dependency cache
  variables:
    CC: ccache gcc
    CCACHE_DIR: $CI_PROJECT_DIR/.ccache
  script:
    - apt-get update
    - apt-get -y install ccache
    - ccache -z
    - python -m venv --copies .venv
    - source .venv/bin/activate
    - pip install --upgrade pip
    - pip install "poetry==1.3.1"
    - poetry install --no-root
    - poetry run python build.py
    - ccache -s
  parallel:
    matrix:
      - PYVER: ["3.7", "3.8", "3.9", "3.10"]
  cache:
    key: 
      files: 
        - poetry.lock
        - src/libjpeg/jversion.h
      prefix: ${PYVER}
    paths: 
      - .venv/
      - src/libjpeg
      - $CI_PROJECT_DIR/.ccache
  rules:
    - when: always

 # Code quality
.cq-base:
  image: python:3.10
  stage: code quality
  before_script:
    - source .venv/bin/activate  
  needs: 
    - build-venv
  cache:
    key: 
      files: 
        - poetry.lock
        - src/libjpeg/jversion.h
      prefix: "3.10"
    paths: 
      - .venv/
      - src/libjpeg
    policy: pull
  rules:
    - when: always

lint:
  extends: .cq-base
  script:
    - poetry install
    - poetry run pylint torchjpeg
    - poetry run pylint test
    - poetry run pylint examples
    - poetry run pylint ./*.py

type-check:
  extends: .cq-base
  script:
    - poetry run mypy src/torchjpeg
    - poetry run mypy test
    - poetry run mypy examples
    - poetry run mypy ./*.py

imports-sorted:
  extends: .cq-base
  script:
    - poetry run isort . --check

style:
  extends: .cq-base
  script:
    - poetry run black . --check

dco:
  extends: .cq-base
  script:
    - poetry run invoke dco

# Tests
test:
  image: python:$PYVER
  stage: test
  parallel:
    matrix:
      - PYVER: ["3.7", "3.8", "3.9", "3.10"]
  before_script:
    - source .venv/bin/activate
    - poetry install
  script:
    - poetry run pytest test/import --junitxml=import.xml --cov-report xml
    - poetry run pytest test/unit --junitxml=unit.xml --cov-report xml
    #- poetry run pytest test/e2e
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit:
        - import.xml
        - unit.xml
  needs: 
    - build-venv
  cache:
    key: 
      files: 
        - poetry.lock
        - src/libjpeg/jversion.h
      prefix: ${PYVER}
    paths: 
      - .venv/
      - src/libjpeg
    policy: pull
  coverage: '/^TOTAL.+?(\d+\%)$/'
  rules:
    - when: always

# Build wheels
build-wheel:
  image: quay.io/pypa/manylinux_2_28_x86_64
  stage: build
  variables: 
    PYBIN: /opt/python/$PYVER/bin
  parallel:
    matrix:
      - PYVER: [cp37-cp37m, cp38-cp38, cp39-cp39, cp310-cp310]
  script:
    - yum install util-linux
    - ${PYBIN}/pip install poetry==1.3.1
    - ${PYBIN}/poetry run pip install "dunamai==1.3.0" "torch==1.13.1"
    - ${PYBIN}/poetry version $(${PYBIN}/poetry run python version.py)
    - ${PYBIN}/poetry build
    - rename manylinux_2_28 manylinux2014 dist/*
  needs: []
  dependencies: []
  artifacts:
    paths:
      - dist/
      - pyproject.toml
  rules:
    - when: always

build-docs:
  image: python:3.10
  stage: build
  before_script:
    - source .venv/bin/activate
    - poetry install
  script:
    - cd doc
    - make html
  artifacts:
    paths:
      - doc/build/html
  cache:
    key: 
      files: 
        - poetry.lock
        - src/libjpeg/jversion.h
      prefix: "3.10"
    paths: 
      - .venv/
      - src/libjpeg
    policy: pull
  needs: 
    - build-venv
  rules:
    - when: always
  
# Deploy
pypi:
  stage: deploy
  image: python:3.10
  script:
    - pip install "poetry==1.3.1"
    - poetry publish --username __token__ --password ${pypi_push_key}
  rules:
    - if: '$CI_COMMIT_TAG'
      when: on_success
    - if: '$BUILD_OFFICIAL'
      when: on_success
  dependencies:
    - build-wheel

pages:
  stage: deploy
  image: python:3.10
  script: 
    - mv doc/build/html public
  artifacts:
    paths:
      - public
  dependencies:
    - build-docs
  rules:
    - if: '$CI_COMMIT_TAG'
      when: on_success
  